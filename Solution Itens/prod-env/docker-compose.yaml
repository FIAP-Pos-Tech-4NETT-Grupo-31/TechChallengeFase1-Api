version: '3.8'

networks:
  network_contatos:

volumes:
  prometheus-data:
    driver: local

services:

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - 9090:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
    volumes:
      - ./prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus-data:/prometheus
    restart: unless-stopped
    networks:
      - network_contatos
  
  loki:
    image: grafana/loki:2.9.4
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - network_contatos

  grafana:
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ADMIN_PASSWORD=Grupo#31
    volumes:
      - ./dashboards:/var/lib/grafana/dashboards
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
            - name: Loki
              type: loki
              access: proxy
              orgId: 1
              url: http://loki:3100
              basicAuth: false
              isDefault: true
              version: 1
              editable: false
            - name: Prometheus
              type: prometheus
              access: proxy
              orgId: 1
              url: http://prometheus:9090
              basicAuth: false
              isDefault: false
              version: 1
              editable: false
        EOF
        mkdir -p /etc/grafana/provisioning/dashboards
        cat <<EOF > /etc/grafana/provisioning/dashboards/dashboard.yml
        apiVersion: 1
        providers:
          - name: 'Default'
            orgId: 1
            folder: ''
            type: file
            options:
              path: /var/lib/grafana/dashboards
        EOF
        /run.sh
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - network_contatos

  sqlserver:
    image: mcr.microsoft.com/azure-sql-edge
    environment:
      MSSQL_SA_PASSWORD: "Grupo#31"
      ACCEPT_EULA: 1
      MSSQL_PID: "Developer"
    ports:
      - "1433:1433"
    networks:
      - network_contatos

  mssqltools:
    image: mcr.microsoft.com/mssql-tools
    depends_on:
      - sqlserver
    volumes:
      - ./scripts:/scripts
    entrypoint:
      - /bin/bash
      - -c
      - |
        sleep 20s
        /opt/mssql-tools/bin/sqlcmd -S sqlserver -U SA -P Grupo#31 -d master -i /scripts/generate-database.sql
    networks:
      - network_contatos

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:        
        - RABBITMQ_DEFAULT_PASS=Grupo#31
    networks:
      - network_contatos 

  contatos.api:
    image: ${DOCKER_REGISTRY-}contatos.api
    ports:
      - 8080:8080
    depends_on:
      - sqlserver
    build:
      context: ../../Contatos.API/
      dockerfile: dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
      - ASPNETCORE_HTTP_PORTS=8080
    networks:
      - network_contatos

  contatos.cadastro-service:
    image: ${DOCKER_REGISTRY-}contatos.cadastro-service
    ports:
      - 8081:8080
    depends_on:
      - sqlserver
    build:
      context: ../../Contatos.CadastroService/
      dockerfile: dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    networks:
      - network_contatos

  contatos.consulta-service:
    image: ${DOCKER_REGISTRY-}contatos.consulta-service
    ports:
      - 8082:8080
    depends_on:
      - sqlserver
    build:
      context: ../../Contatos.ConsultaService/
      dockerfile: dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    networks:
      - network_contatos 

  contatos.persistencia-service:
    image: ${DOCKER_REGISTRY-}contatos.persistencia-service
    ports:
      - 8083:8080
    depends_on:
      - sqlserver
      - rabbitmq
    build:
      context: ../../Contatos.PersistenciaService/
      dockerfile: dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Release
    networks:
      - network_contatos
       